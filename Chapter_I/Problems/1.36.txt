(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (cond ((close-enough? guess next) (newline) next)
            (else (newline) (display guess) (try next)))))
  (try first-guess))
  
  
;;just changed if to cond 
;;and added some printing functions to cond clauses
;;-----------------------------------

;;without average damping:
(define (f_wo_damping x) (/ (log 1000.0) (log x)))

;;with average damping
(define (f_w_damping x) (/ (+ (/ (log 1000.0) (log x))
                              x)
                           2.0))

(newline)
(display "without damping:")
(fixed-point f_wo_damping 2.0)  ;;34 steps

(newline)
(display "with damping:")
(fixed-point f_w_damping 2.0)   ;;9 steps
