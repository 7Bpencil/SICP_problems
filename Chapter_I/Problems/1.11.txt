;;first recursive version - direct math definition

(define (f n)
  (if (< n 3)
      n
      (+ (f (- n 1))
         (f (- n 2))
         (f (- n 3)))))

------------------------------

;;Let's see how it works:
f(0) = 0
f(1) = 1
f(2) = 2
f(3) = f(2) + f(1) + f(0) = 2+1+0 = 3
f(4) = f(3) + f(2) + f(1) = 3+2+1 = 6
f(5) = f(4) + f(3) + f(2) = 6+3+2 = 11
f(6) = f(5) + f(4) + f(3) = 11+6+3 = 20

;;So if f(n) = a+b+c
;;f(n+1) = (a+b+c)+a+b

;;iterative version:

(define (f n)
  (define (f-iter a b c n)
    (if (= (- n 3) 0)
        (+ a b c)
        (f-iter (+ a b c) a b (- n 1))))
  (if (< n 3)
      n
      (f-iter 2 1 0 n)))

-----------------------------

;;We can notice:

f(6) = f(5) + f(4) + f(3)
;;but f(5) = f(4) + f(3) + f(2)
;;and rewrite f(6):
f(6) = 2f(4) + 2f(3) + f(2)
f(6) = 2f(5) - f(2)
 
;;so f(n) = 2f(n-1) - f(n-4)


;;second recursive version:

(define (f n)
  (if (< n 4)
      n
      (- (* 2 (f (- n 1)))
         (f (- n 4)))))

;;it's necesary to check that n<4
;;because f(3) = 2f(2)-f(-1) = 2*2-(-1) = 5 instead of 3
;;in other cases it works right
